#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Nov  3 12:13:54 2021

@author: grahamseasons
"""
genes = [{'dilateref_kernel_size': [0, 4, 8]},
         {'dilateref_kernel_shape': [5],
              0: '3D',
              1: '2D',
              2: 'box',
              3: 'boxv',
              4: 'gauss',
              5: 'sphere'},
         {'extract_t_min': [10]},
         {'mcflirt_interpolation': [0, 1, 2],
             0: 'spline',
             1: 'nn',
             2: 'sinc'},
         {'mcflirt_mean_vol': [0, 1],
              0: False,
              1: True},
         {'decision_slice_correct': [0, 1],
              0: False,
              1: True},
         #
         {'prelim_interp': [0, 1, 2, 3],
              0: 'trilinear',
              1: 'nearestneighbour',
              2: 'sinc',
              3: 'spline'},
         {'prelim_no_resample': [0, 1],
              0: False,
              1: True},
         {'dilatebrain_kernel_size': [0, 4, 8]},
         {'dilatebrain_kernel_shape': [5],
              0: '3D',
              1: '2D',
              2: 'box',
              3: 'boxv',
              4: 'gauss',
              5: 'sphere'},
         #DILATEREF USED TO BE HERE
         {'warp_warp_resolution': [0, 1],
              0: (10,10,10),
              1: (20,20,20)},
         #EVERYTHING ABOVE BET USED TO BE HERE
         {'Fregistration_bbr': [1],#**
              0: False,
              1: True},
         {'Fregistration_regpre_interp': [0, 1, 2, 3],
              0: 'trilinear',
              1: 'nearestneighbour',
              2: 'sinc',
              3: 'spline'},
         {'Fregistration_regpre_no_resample': [0, 1], #Fregistration_regpre_no_resample
              0: False,
              1: True},
         {'Fregistration_applywarp_': [1], #NOTE: if setting a node input inside function to Undefined -> use empty string
              0: {'apply_isoxfm': 4, 'apply_xfm': '', 'uses_qform': ''},
              1: {'apply_isoxfm': '', 'apply_xfm': True, 'uses_qform': ''}},
         {'Fregistration_concatenate': [0, 1],
              0: False,
              1: True},
         {'Fmni_warplater': [0, 1],
              0: False,
              1: True},
         {'Fmni_warped_interp': [0, 1, 2, 3],#**
              0: 'nn',
              1: 'trilinear',
              2: 'sinc',
              3: 'spline'},
         {'!invwarp_': [0],
              0: 'LINK'},
         {'Fregress_CSF': [0, 1],
              0: False,
              1: True},
         {'Fregress_WM': [0, 1],
              0: False,
              1: True},
         {'Fregress_GLOBAL': [0, 1],
              0: False,
              1: True},
         {'Fregress_glm_dat_norm': [0, 1],
              0: False,
              1: True},
         {'Fregress_glm_demean': [0, 1],
              0: False,
              1: True},
         {'Fregress_realignregress': [0, 1],
              0: False,
              1: True},
         {'Fsmooth_susan': [1],#**
              0: False,
              1: True},
         {'Fsmooth_fwhm': range(2, 13, 2)},
         #ART
         {'end_preprocess': 'level1'},
         #Finfo_rest OPTIONS WILL NEED TO BE PARTIALLY USER DEFINED -> gui to ask?
         {'~construct~Finfo_rest_type': [0, 1, 2],
              0: 'atlas',
              1: 'ROI',
              2: 'data'},
         {'~construct~Finfo_rest_seedinfo': {'low': -0.5, 'high': 2.5},
              0: [('cing post', 1)], #can include atlas name with seed info -> user specified
              1: [('cing post', 0, 1)], #different variations on same mask, or list masks targeting different networks
              2: [('cing post', 1)]},
         {'~construct~Finfo_rest_coords': [0, 1, 2],
              0: [(44, 35, 44)],#[(),(),()]
              1: [(44, 37, 49)],
              2: [(47, 38, 56)]},
         {'~construct~Finfo_rest_radius': range(3, 11)},
         {'~construct~Finfo_rest_atlas': [0],
              0: 'harvard'},
         {'~construct~Finfo_rest_k': [0, 1, 2],
              0: 'faces',
              1: 'edges',
              2: 'vertices'},
         {'~construct~Finfo_rest_kcc': [0.5, 0.6, 0.7]},
         {'~construct~Finfo_rest_lp': [0.01]},
         {'~construct~Finfo_rest_hp': [0.1]},
         {'Finfo_HP': range(50, 150)},
         {'!correction_': [0],
              0: 'LINK'},
         {'l1d_bases': [0, 1, 2, 3, 4],
              0: {'gamma': {'derivs': True}},
              1: {'gamma': {'derivs': False}},
              2: {'dgamma': {'derivs': True}},
              3: {'dgamma': {'derivs': False}},
              4: {'custom': {'bfcustompath': '${FSLDIR}/etc/default_flobs.flobs'}}},
         {'l1d_model_serial_correlations': [0, 1],
              0: False,
              1: True},
         {'!applywarpcopes_': [0],
              0: 'LINK'},
         {'!applywarpvarcopes_': [0],
              0: 'LINK'},
         {'!applywarpbold_': [0],
              0: 'LINK'},
         {'!ret_': [0],
              0: 'LINK'},
         {'!ident_': [0],
              0: 'LINK'},
         {'end_level1': 'level2'},
         {'flameo_run_mode': [0, 1, 2, 3],
              0: 'fe',
              1: 'ols',
              2: 'flame1',
              3: 'flame12'},
         {'flameo_infer_outliers': [0, 1],
              0: False,
              1: True},
         {'end_level2': 'level3'},
         {'flameo_run_mode': [0, 1, 2, 3],
              0: 'fe',
              1: 'ols',
              2: 'flame1',
              3: 'flame12'},
         {'flameo_infer_outliers': [0, 1],
              0: False,
              1: True},
         {'end_level3': 'correction'},
         {'~construct~correct_cor_method': [0, 1, 2],
              0: 'fdr',
              1: 'fwe',
              2: 'clust'},
         {'~construct~correct_cor_connectivity': [26]},
         {'~construct~correct_cor_zthreshold': [2, 2.3, 2.7, 3.1, 3.5, 4]},
         {'~construct~correct_cor_pthreshold': [0.05]},
         {'~construct~correct_cor_p': [0.1, 0.05, 0.01, 0.005, 0.001]},
         {'end_correction': 'end'},
         ]
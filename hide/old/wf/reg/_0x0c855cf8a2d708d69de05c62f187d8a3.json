[
    [
        "T1w",
        [
            "/Volumes/NewVolume/a_copy/sub-031S0618_T1w.nii.gz",
            "2918fb6a3837cd75a0daadda2061acd6"
        ]
    ],
    [
        "applywarp_apply_isoxfm",
        ""
    ],
    [
        "applywarp_apply_xfm",
        true
    ],
    [
        "applywarp_interp",
        "spline"
    ],
    [
        "applywarp_no_resample",
        true
    ],
    [
        "applywarp_uses_qform",
        ""
    ],
    [
        "bbr",
        true
    ],
    [
        "bet",
        [
            "/Volumes/NewVolume/a_copy/sub-031S0618_T1w_corrected_xform_masked.nii.gz",
            "13610ec80c45c3c9e6dbd503e3875624"
        ]
    ],
    [
        "concatenate",
        true
    ],
    [
        "corrected_img",
        [
            "/Volumes/NewVolume/a_copy/sub-031S0618_task-rest_bold_roi_mcf_st.nii.gz",
            "9fd903e8cde2ea9887ad5811e7cbd668"
        ]
    ],
    [
        "function_str",
        "def registration(T1w, mask, start_img, corrected_img, bet, wm_file, bbr, regpre_interp, regpre_no_resample, applywarp_apply_isoxfm, applywarp_apply_xfm, applywarp_uses_qform, concatenate, regbbr_interp, regbbr_no_resample, applywarp_interp, applywarp_no_resample, plugin_args):\n    from nipype.interfaces.fsl import FLIRT\n    from nipype.interfaces.base import Undefined\n    from nipype import IdentityInterface\n    from nipype import Workflow, Node\n    from os.path import join as opj\n    import os, glob, re\n\n    reg = Workflow(name='reg')\n    reg.base_dir = os.getcwd()\n\n    bbr = vars().get('bbr', True)\n    concatenate = vars().get('concatenate', True)\n    #CHECK TO VERIFY THAT DOF IS CALLED DOF\n    regpre = Node(FLIRT(in_file=start_img, dof=6, reference=bet, output_type='NIFTI_GZ'), name='regpre')\n\n    applywarp = Node(FLIRT(in_file=corrected_img, reference=bet, output_type='NIFTI_GZ'), name='applywarp')\n\n    outnode =  Node(IdentityInterface(fields=['warped','out_mat', 'mask']), name='outnode')\n\n    if bbr:\n        regbbr = Node(FLIRT(cost='bbr', reference=T1w, in_file=start_img, output_type='NIFTI_GZ',\n                        schedule=opj(os.getenv('FSLDIR'), 'etc/flirtsch/bbr.sch')), name='regbbr')\n        regbbr.inputs.wm_seg = wm_file\n\n        reg.connect([(regpre, regbbr, [('out_matrix_file', 'in_matrix_file')]),\n                     (regbbr, outnode, [('out_matrix_file', 'out_mat')]),\n                     ])\n\n        if not concatenate:\n            reg.connect([(regbbr, applywarp, [('out_matrix_file', 'in_matrix_file')])])\n\n        node_reg = 'regbbr'\n    else:\n        reg.connect([(regpre, outnode, [('out_matrix_file', 'out_mat')]),\n                     ])\n\n        if not concatenate:\n            reg.connect([(regpre, applywarp, [('out_matrix_file', 'in_matrix_file')])])\n\n        node_reg = 'regpre'\n\n    node_warp = 'applywarp'\n\n    for param in ['regpre_interp', 'regpre_no_resample', 'applywarp_apply_isoxfm', 'applywarp_apply_xfm', 'applywarp_uses_qform', 'regbbr_interp', 'regbbr_no_resample', 'applywarp_interp', 'applywarp_no_resample']:\n        search = re.search('([A-Za-z]+)_([A-Za-z_]+)', param)\n        if vars()[param]: setattr(vars()[search.group(1)].inputs, search.group(2), vars()[param])\n        else: setattr(vars()[search.group(1)].inputs, search.group(2), Undefined)\n\n    reg.run(plugin='IPython', plugin_args=plugin_args)\n\n    out_mat = glob.glob(os.getcwd() + '/reg/' + node_reg + '/*.mat')[0]\n    if concatenate:\n        warped = corrected_img\n    else:\n        warped = glob.glob(os.getcwd() + '/reg/' + node_warp + '/*.nii*')[0]\n\n    return out_mat, warped, glob.glob(os.getcwd() + '/reg/**', recursive=True)\n"
    ],
    [
        "mask",
        [
            "/usr/local/fsl/data/standard/MNI152_T1_2mm_brain.nii.gz",
            "08e543952cf331155b609360e1bac6c3"
        ]
    ],
    [
        "plugin_args",
        [
            [
                "cluster_id",
                "1647026890-u1vi"
            ],
            [
                "profile",
                ""
            ]
        ]
    ],
    [
        "regbbr_interp",
        "spline"
    ],
    [
        "regbbr_no_resample",
        true
    ],
    [
        "regpre_interp",
        "spline"
    ],
    [
        "regpre_no_resample",
        true
    ],
    [
        "start_img",
        [
            "/Volumes/NewVolume/a_copy/sub-031S0618_task-rest_bold_roi_mcf_roi.nii.gz",
            "303432a4d36024f3b288b4f79a08797d"
        ]
    ],
    [
        "wm_file",
        [
            "/Volumes/NewVolume/a_copy/sub-031S0618_T1w_corrected_xform_masked_seg_2.nii.gz",
            "bb881d8b9a8a2e094c021f231f548963"
        ]
    ]
]